/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int extra = 0;
        int count = 0;
        ListNode *L3;
        ListNode *temp;
        bool last = false;
        while (l1 != nullptr || l2 != nullptr){
            int num = 0;
            last = false;
            if (l1 != nullptr){
                num += l1->val;
            }
            if (l2 != nullptr){
                num += l2->val;
            }
            if (extra == 1){
                num += 1;
            }
            if (num >= 10){
                extra = 1;
                num = num % 10;
                last = true;
            }
            else{
                extra = 0;
            }
            if (count == 0){
                temp = new ListNode(num);
                L3 = temp;
                count +=1;
            }
            else{
                ListNode *temps = new ListNode(num);
                temp->next = temps;
                temp = temp->next;
            }
            if (l1 != nullptr){
                l1 = l1->next;
                
            }
            if (l2 != nullptr){
                 l2 = l2->next;
            }
            
        }
        if (last){
            ListNode *temps = new ListNode(1);
            temp->next = temps;
            temp = temp->next;
        }
        return L3;
    }
};
