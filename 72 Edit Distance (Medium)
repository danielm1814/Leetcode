class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        memo = {}
        def helper(word1, word2):
            if (word1, word2) in memo:
                return memo[(word1, word2)]
            if not word1 and not word2:
                memo[(word1,word2)] = 0
                return 0
            if not word1:
                memo[(word1, word2)] = len(word2)
                return len(word2)
            if not word2:
                memo[(word1, word2)] = len(word1)
                return len(word1)
            if word1[0] == word2[0]:
                memo[(word1, word2)] = helper(word1[1:], word2[1:])
                return memo[(word1, word2)]
            insert = 1 + helper(word1, word2[1:])
            delete = 1 + helper(word1[1:], word2)
            replace = 1 + helper(word1[1:], word2[1:])
            memo[(word1, word2)] = min(insert, min(delete, replace))
            return memo[(word1, word2)]
        return helper(word1, word2)

        
