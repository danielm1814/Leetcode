class Node:
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.next = None
        self.prev = None

class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.capacity = capacity
        self.key_val = {}
        self.head = Node(-1,-1)
        self.tail = Node(-1,-1)
        self.head.next = self.tail
        self.tail.prev = self.head
        
    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.key_val:
            node = self.key_val[key]
            node.next.prev = node.prev
            node.prev.next = node.next
            node.next = self.tail
            node.prev = self.tail.prev
            self.tail.prev.next = node
            self.tail.prev = node
            return self.key_val[key].val
        return -1

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        if key in self.key_val:
            node = self.key_val[key]
            node.val = value
            node.next.prev = node.prev
            node.prev.next = node.next
        else:
            node = Node(key, value)
            self.key_val[key] = node
        node.next = self.tail
        node.prev = self.tail.prev
        self.tail.prev.next = node
        self.tail.prev = node
        if len(self.key_val) > self.capacity:
            self.key_val.pop(self.head.next.key)
            self.head.next = self.head.next.next
            self.head.next.prev = self.head
            
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
