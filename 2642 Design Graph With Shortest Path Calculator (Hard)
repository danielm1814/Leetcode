import math
import heapq
class Graph:

    def __init__(self, n: int, edges: List[List[int]]):
        self.graph = {}
        self.n = n
        for edge in edges:
            if edge[0] not in self.graph:
                self.graph[edge[0]] = []
            self.graph[edge[0]].append((edge[1], edge[2]))
        

    def addEdge(self, edge: List[int]) -> None:
        if edge[0] not in self.graph:
            self.graph[edge[0]] = []
        self.graph[edge[0]].append((edge[1], edge[2]))

    def shortestPath(self, node1: int, node2: int) -> int:
        shortest = [math.inf]*self.n
        pq = [(0,node1)]
        shortest[node1] = 0

        while pq:
            d, node = heapq.heappop(pq)
            if node == node2:
                return d
            if d > shortest[node]:
                continue
            if node not in self.graph:
                continue
            for neighbor, weight in self.graph[node]:
                new_dist = d + weight
                if new_dist < shortest[neighbor]:
                    shortest[neighbor] = new_dist
                    heapq.heappush(pq, (new_dist, neighbor))
        return -1


        
                
                    


# Your Graph object will be instantiated and called as such:
# obj = Graph(n, edges)
# obj.addEdge(edge)
# param_2 = obj.shortestPath(node1,node2)
